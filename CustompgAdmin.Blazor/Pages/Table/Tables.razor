@page "/tables"
@using CustompgAdmin.UI.Models.ReturnModel;
@using Blazored.LocalStorage;
@inject HttpClient _httpClient;
@inject NavigationManager NavigationManager;
@inject ILocalStorageService Storage;
<h3>Tables</h3>

<table class="table">
    <thead>
        <tr>


            <th scope="col">Name</th>
            <th scope="col"></th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>

        @for (int i = 0; i < tables.Count; i++)
        {
            var table = tables[i];

            <tr>
                <td>@table.Name</td>

                <td><button type="button" class="btn btn-primary" @onclick="(()=> ToColumns(table.Id))">View Tables</button></td>
                <td><button type="button" class="btn btn-primary" @onclick="(()=> ToWriteQuery())">Create Query</button></td>
                <td><button type="button" class="btn btn-danger" @onclick="(()=> ToDeleteTable(table.Id,table.DatabaseId))">Delete</button></td>
                <td><button type="button" class="btn btn-primary" @onclick="(()=> ToViewData(table.Id))">View Data</button></td>

            </tr>
        }

    </tbody>
</table>


<td><button type="button" class="btn btn-danger" @onclick="ToCreateTable">Create Table</button></td>
@code {
    List<TableReturnModel> tables = new List<TableReturnModel>();
    int databaseId;
    protected override async Task OnInitializedAsync()
    {
        databaseId = Convert.ToInt32(await Storage.GetItemAsStringAsync("databaseId"));
        tables = (await _httpClient.GetFromJsonAsync<List<TableReturnModel>>($"/api/databases/{databaseId}/Tables")) ?? new List<TableReturnModel>();
    }


    public async Task ToDeleteTable(int id,int databaseId)
    {
        await Storage.SetItemAsStringAsync("databaseId", databaseId.ToString());
        await Storage.SetItemAsStringAsync("tableId", id.ToString());

        NavigationManager.NavigateTo("/deletetable");

    }

    public async Task ToColumns(int id)
    {
        await Storage.SetItemAsStringAsync("tableId", id.ToString());
        NavigationManager.NavigateTo("/columns");
    }
    public async Task ToWriteQuery()
    {
        await Storage.SetItemAsStringAsync("databaseId", databaseId.ToString());
        NavigationManager.NavigateTo("/writequery");
    }
    public void ToCreateTable()
    {
        NavigationManager.NavigateTo("/create-table");
    }
    public async Task ToViewData(int id)
    {
        await Storage.SetItemAsStringAsync("tableId", id.ToString());
        NavigationManager.NavigateTo("/viewdata");
        
    }
}
